#!/bin/bash
#set -x

##----------------
#--Colors
##----------------
CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

NOCOLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHTGRAY='\033[0;37m'
DARKGRAY='\033[1;30m'
LIGHTRED='\033[1;31m'
LIGHTGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHTBLUE='\033[1;34m'
LIGHTPURPLE='\033[1;35m'
LIGHTCYAN='\033[1;36m'
WHITE='\033[1;37m'

##-----------------
#--Logo
##-----------------

logo_install () {
	echo -en "${PURPLE}                                  
 __ __  ____  ____   ___   _____     ____   ____    __  __  _   ____   ____    ___  _____     ____  ____   _____ ______   ____  _      _     
|  |  ||    ||    \ /   \ / ___/    |    \ /    |  /  ]|  |/ ] /    | /    |  /  _]/ ___/    |    ||    \ / ___/|      | /    || |    | |    
|  |  | |  | |  D  )     (   \_     |  o  )  o  | /  / |  ' / |  o  ||   __| /  [_(   \_      |  | |  _  (   \_ |      ||  o  || |    | |    
|  |  | |  | |    /|  O  |\__  |    |   _/|     |/  /  |    \ |     ||  |  ||    _]\__  |     |  | |  |  |\__  ||_|  |_||     || |___ | |___ 
|  :  | |  | |    \|     |/  \ |    |  |  |  _  /   \_ |     \|  _  ||  |_ ||   [_ /  \ |     |  | |  |  |/  \ |  |  |  |  _  ||     ||     |
 \   /  |  | |  .  \     |\    |    |  |  |  |  \     ||  .  ||  |  ||     ||     |\    |     |  | |  |  |\    |  |  |  |  |  ||     ||     |
  \_/  |____||__|\_|\___/  \___|    |__|  |__|__|\____||__|\_||__|__||___,_||_____| \___|    |____||__|__| \___|  |__|  |__|__||_____||_____|
                                                                                                                                             \n"
    printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

########## ---------- Скрипт должен быть запущен от sudo ---------- ##########

if [ "$(id -u)" = 0 ]; then
    echo -e "${LIGHTBLUE}This script MUST NOT be run as root user."
    exit 1
fi

########## ---------- Приветики пистолетики =) ---------- ##########

logo_install
printf '%s%s This script checks to see if you have the necessary requirements, and if not, it will install them.%s\n\n' "${BLD}" "${CRE}" "${CNC}"

while true; do
	read -rp "Do you wish to continue? [y/N]: " yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) exit;;
			* ) printf " Error: just write 'y' or 'n'\n\n";;
		esac
    done
clear

######### -------------- Зависимости ------------------########

dependencias=(base-devel alacritty brightnessctl dunst bottom imagemagick \
              libwebp maim mpc neovim ncmpcpp npm pamixer neovim \
              papirus-icon-theme pacman-contrib physlock playerctl python-gobject \
              redshift rust ttf-inconsolata ttf-jetbrains-mono ttf-jetbrains-mono-nerd \
              ttf-joypixels ttf-terminus-nerd ueberzug webp-pixbuf-loader xclip \
              xdo ttf-nerd-fonts-symbols ttf-nerd-fonts-symbols-common \
              ttf-nerd-fonts-symbols-mono yad cmus jgmenu rsync mpv jq git socat mpd polkit-gnome \
              stalonetray kitty lsd ranger micro blueman mousepad ristretto firefox thunar thunar-volman \
              thunar-media-tags-plugin thunar-archive-plugin polybar rofi xdg-user-dirs engrampa bc \
              nitrogen feh picom yt-dlp fzf mcfly neofetch zsh zsh-syntax-highlighting zsh-autosuggestions \
              zsh-history-substring-search starship bluez-utils bluez-tools bluez-plugins bluez-libs bluez \
              zziplib unarj libzip karchive gnome-autoar file-roller mpd-notification \
              cpio arj perl libarchive telegram-desktop code discord gimp blender krita kdenlive kodi \
              kodi-addon-inputstream-adaptive kodi-dev kodi-eventclients kodi-platform p8-platform vde2 xorg-xdpyinfo xorg-xwininfo \
              xorg-xkill xorg-xprop xorg-xrandr xorg-xsetroot xdotool bzip2 gzip lrzip lz4 lzip lzop xz zstd p7zip zip unzip unrar unarchiver xarchiver)



dependencias_paru=(cava tor-browser-bin ymuse-git zscroll-git eww-git musnify-mpd gnome-icon-theme catppuccin-cursors-mocha ytdlp-gui oh-my-zsh-git oh-my-posh-bin autotiling gtkhash-thunar \
                  zenity-gtk3 i3lock-color gdown pamac-aur kazam kodi-addon-pvr-iptvsimple hypnotix)

is_installed() {
  pacman -Qi "$1" &> /dev/null
  return $?
}

########## ---------- Установка пакетов из стандартных репозиториев pacman ---------- ##########

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for pkges in "${dependencias[@]}"
do
  if ! is_installed "$pkges"; then
    sudo pacman -S "$pkges" --noconfirm
    printf "\n"
  else
    printf '%s%s is already installed on your system!%s\n' "${CGR}" "$pkges" "${CNC}"
    sleep 1
  fi
done
sleep 2
clear

########## ---------- Установка paru---------- ##########
logo_paru () {
	echo -en "${ORANGE}                                  
 ____   ____  ____  __ __      ____  ____   _____ ______   ____  _      _     
|    \ /    ||    \|  |  |    |    ||    \ / ___/|      | /    || |    | |    
|  o  )  o  ||  D  )  |  |     |  | |  _  (   \_ |      ||  o  || |    | |    
|   _/|     ||    /|  |  |     |  | |  |  |\__  ||_|  |_||     || |___ | |___ 
|  |  |  _  ||    \|  :  |     |  | |  |  |/  \ |  |  |  |  _  ||     ||     |
|  |  |  |  ||  .  \     |     |  | |  |  |\    |  |  |  |  |  ||     ||     |
|__|  |__|__||__|\_|\__,_|    |____||__|__| \___|  |__|  |__|__||_____||_____|
                                                                              \n"
    printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}
logo_paru
clone_paru() {
# Installing Paru
if command -v paru >/dev/null 2>&1; then
    printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sInstalling paru%s\n" "${BLD}" "${CBL}" "${CNC}"
    {
        cd "$HOME" || exit
        git clone $paru_url
        cd $HOME/paru-bin || exit
        makepkg -si --noconfirm
        } || {
        printf "\n%s%sFailed to install Paru. You may need to install it manually%s\n" "${BLD}" "${CRE}" "${CNC}"
    }
fi
}

while true; do
	read -rp "Do you want paru? [y/N]: " yn
		case $yn in
			[Yy]* ) clone_paru && break;;
			[Nn]* ) break;;
			* ) printf " Error: just write 'y' or 'n'\n\n";;
		esac
    done
clear

########## ---------- Установка пакетов AUR---------- ##########

is_installed_paru() {
  paru -Qi "$1" &> /dev/null
  return $?
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for pkges_paru in "${dependencias_paru[@]}"
do
  if ! is_installed_paru "$pkges_paru"; then
    paru -S "$pkges_paru" --noconfirm
    printf "\n"
  else
    printf '%s%s is already installed on your system!%s\n' "${CGR}" "$pkges_paru" "${CNC}"
    sleep 1
  fi
done
sleep 2
clear

logo_all_done () {
	echo -en "${GREEN}                                  
  ____  _      _          ____ _____     ___     ___   ____     ___  __ 
 /    || |    | |        |    / ___/    |   \   /   \ |    \   /  _]|  |
|  o  || |    | |         |  (   \_     |    \ |     ||  _  | /  [_ |  |
|     || |___ | |___      |  |\__  |    |  D  ||  O  ||  |  ||    _]|__|
|  _  ||     ||     |     |  |/  \ |    |     ||     ||  |  ||   [_  __ 
|  |  ||     ||     |     |  |\    |    |     ||     ||  |  ||     ||  |
|__|__||_____||_____|    |____|\___|    |_____| \___/ |__|__||_____||__|
                                                                        \n"
    printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}
logo_all_done